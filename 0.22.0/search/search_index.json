{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>Hello worlding of this is going to take it over And for what it's worth, it's a beautiful world!</p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"reference/tradingtoolbox/__init__/","title":"Tradingtoolbox","text":""},{"location":"reference/tradingtoolbox/__init__/#tradingtoolbox.print","title":"<code>print(*msg)</code>","text":"<p>Logs the provided object using an advanced logging mechanism.</p> <p>This method overrides the default <code>print</code> function to utilize a logger for output. It ensures that all output is captured through the logging system rather than standard output.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>Any</code> <p>The object to be logged. It can be of any type that the logger can handle, including strings, numbers, or custom objects.</p> <code>()</code> <p>Notes:</p> <ul> <li>This method provides more control and consistency by leveraging   the logging system, which is particularly useful in production   environments or when working with larger applications.</li> </ul> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>def print(*msg: Any) -&gt; None:\n    \"\"\"\n    Logs the provided object using an advanced logging mechanism.\n\n    This method overrides the default `print` function to utilize a\n    logger for output. It ensures that all output is captured\n    through the logging system rather than standard output.\n\n    Parameters:\n        msg: The object to be logged. It can be of any type that the\n            logger can handle, including strings, numbers, or custom objects.\n\n    **Notes**:\n\n    - This method provides more control and consistency by leveraging\n      the logging system, which is particularly useful in production\n      environments or when working with larger applications.\n    \"\"\"\n    logger.print(\" \".join(map(pretty_repr, msg)))\n</code></pre>"},{"location":"reference/tradingtoolbox/dev/","title":"Dev","text":""},{"location":"reference/tradingtoolbox/clickhouse/__init__/","title":"Clickhouse","text":""},{"location":"reference/tradingtoolbox/clickhouse/clickhouse/","title":"Clickhouse","text":""},{"location":"reference/tradingtoolbox/clickhouse/generate_table_schema/","title":"Generate table schema","text":""},{"location":"reference/tradingtoolbox/exchanges/__init__/","title":"Exchanges","text":""},{"location":"reference/tradingtoolbox/exchanges/binance/","title":"Binance","text":""},{"location":"reference/tradingtoolbox/exchanges/okx/","title":"Okx","text":""},{"location":"reference/tradingtoolbox/utils/__init__/","title":"Utils","text":"<p>Module that contains a bunch of helper utils</p>"},{"location":"reference/tradingtoolbox/utils/__init__/#tradingtoolbox.utils.Logger","title":"<code>Logger</code>","text":"<p>Custom Logger class utilizing Rich and Loguru for advanced logging.</p> <p>This class sets up a logging system that uses both the <code>Rich</code> library for enhanced output formatting in the console and <code>Loguru</code> for handling log files and more sophisticated logging features. The logger is configured to display colored and detailed logs in the terminal, while also saving structured logs to a file for debugging purposes.</p>"},{"location":"reference/tradingtoolbox/utils/__init__/#tradingtoolbox.utils.Logger--key-features","title":"Key Features:","text":"<ul> <li>Rich Tracebacks: Automatically installs Rich traceback for more readable   error messages in the console, highlighting key information such as line numbers   and functions.</li> <li>Log File Handling: Logs are saved in a specified directory with detailed   information in JSON-like format, serialized for easier parsing.</li> <li>Log Levels: Configured to handle different log levels, focusing on <code>INFO</code>   messages for the console and <code>DEBUG</code> level messages for log files.</li> </ul> <p>Usage Example <pre><code>from tradingtoolbox.utils import logger, Logger\n\n# Create a custom logger\ncustom_logger = Logger(supressed_modules=[\"talib\"], log_dir=\"./my_logs\")\n\ntry:\n    # Code that might fail\n    print(a)\nexcept Exception as e:\n    logger.error()\n\nlogger.warning(\"This is a warning message\")\nlogger.info({\"key\": \"value\"})\nlogger.print(\"This replaces the standard print\")\n</code></pre></p> <p>Notes:</p> <ul> <li>The logger's console output is colorized using <code>Rich</code>, and it includes rich tracebacks   for easier debugging.</li> <li>Log files are stored in the <code>log_dir</code> directory, defaulting to <code>./logs</code>.</li> </ul> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>class Logger:\n    \"\"\"\n    Custom Logger class utilizing Rich and Loguru for advanced logging.\n\n    This class sets up a logging system that uses both the `Rich` library\n    for enhanced output formatting in the console and `Loguru` for handling\n    log files and more sophisticated logging features. The logger is configured\n    to display colored and detailed logs in the terminal, while also saving\n    structured logs to a file for debugging purposes.\n\n    Key Features:\n    --------------\n    - **Rich Tracebacks**: Automatically installs Rich traceback for more readable\n      error messages in the console, highlighting key information such as line numbers\n      and functions.\n    - **Log File Handling**: Logs are saved in a specified directory with detailed\n      information in JSON-like format, serialized for easier parsing.\n    - **Log Levels**: Configured to handle different log levels, focusing on `INFO`\n      messages for the console and `DEBUG` level messages for log files.\n\n\n\n    **Usage Example**\n    ```python\n    from tradingtoolbox.utils import logger, Logger\n\n    # Create a custom logger\n    custom_logger = Logger(supressed_modules=[\"talib\"], log_dir=\"./my_logs\")\n\n    try:\n        # Code that might fail\n        print(a)\n    except Exception as e:\n        logger.error()\n\n    logger.warning(\"This is a warning message\")\n    logger.info({\"key\": \"value\"})\n    logger.print(\"This replaces the standard print\")\n    ```\n\n    **Notes:**\n\n    - The logger's console output is colorized using `Rich`, and it includes rich tracebacks\n      for easier debugging.\n    - Log files are stored in the `log_dir` directory, defaulting to `./logs`.\n    \"\"\"\n\n    def __init__(self, suppressed_modules=SUPPRESSED_MODULES, log_dir=\"./logs\"):\n        \"\"\"\n        Initializes the custom logger instance.\n\n        Parameters:\n        -----------\n        suppressed_modules : list, optional\n            A list of modules to suppress from rich traceback (default is SUPPRESSED_MODULES).\n        log_dir : str, optional\n            The directory where log files will be saved (default is \"./logs\").\n        \"\"\"\n\n        self._create_logs_dir(log_dir)\n\n        # This will install rich to traceback, which is quite handy\n        rich.traceback.install(\n            show_locals=False,\n            suppress=[__import__(name) for name in suppressed_modules],\n        )\n\n        config = {\n            \"handlers\": [\n                {\n                    \"sink\": RichHandler(\n                        show_level=False,\n                        show_time=True,\n                        rich_tracebacks=True,\n                        markup=True,\n                        omit_repeated_times=False,\n                    ),\n                    # \"sink\": sys.stdout,\n                    # This will force us to only use the rich handler on normal levels\n                    \"filter\": lambda record: record[\"level\"].name == \"INFO\",\n                    \"format\": \"{message}\",\n                },\n                # {\n                #     \"sink\": sys.stdout,\n                #     \"colorize\": True,\n                #     \"backtrace\": True,\n                #     \"diagnose\": True,\n                #     \"enqueue\": False,\n                #     \"format\": \"&lt;cyan&gt;\u276f {module}:{function} ({line})&lt;/cyan&gt; | &lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss.sss}&lt;/green&gt;\",\n                #     \"filter\": lambda record: record[\"level\"].name == \"INFO\",\n                # },\n                {\n                    \"sink\": \"./logs/logs.log\",\n                    \"level\": \"DEBUG\",\n                    \"serialize\": True,\n                    \"enqueue\": True,\n                    \"colorize\": True,\n                    \"format\": \"&lt;light-cyan&gt;\u276f {module}:{function} ({line})&lt;/light-cyan&gt; | &lt;light-black&gt;{time:YYYY-MM-DD at HH:mm:ss.sss}&lt;/light-black&gt;\\n{message}\",\n                },\n            ],\n        }\n\n        _logger.configure(**config)  # type: ignore\n        self.logger = _logger.patch(patching)\n\n    def _create_logs_dir(self, directory=\"./logs\"):\n        os.makedirs(directory, exist_ok=True)\n\n    def error(self):\n        \"\"\"\n        Logs the most recent traceback error in a readable format, useful for. Uses the ERROR level\n        \"\"\"\n        console.print(Traceback())\n        recent_traceback = traceback.format_exc(limit=10)\n        self.logger.error(recent_traceback)\n\n    def warning(self, obj):\n        \"\"\"\n        Logs a warning message with the option to pretty-print an object. Uses the WARNING level\n        \"\"\"\n        self.logger.opt(depth=2).warning(pretty_repr(obj))\n\n    def print(self, obj):\n        \"\"\"\n        Logs an informational message, replacing the standard print function. Uses the INFO level\n        \"\"\"\n        self.logger.opt(depth=2).info(pretty_repr(obj))\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/__init__/#tradingtoolbox.utils.Logger.__init__","title":"<code>__init__(suppressed_modules=SUPPRESSED_MODULES, log_dir='./logs')</code>","text":"<p>Initializes the custom logger instance.</p>"},{"location":"reference/tradingtoolbox/utils/__init__/#tradingtoolbox.utils.Logger.__init__--parameters","title":"Parameters:","text":"<p>suppressed_modules : list, optional     A list of modules to suppress from rich traceback (default is SUPPRESSED_MODULES). log_dir : str, optional     The directory where log files will be saved (default is \"./logs\").</p> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>def __init__(self, suppressed_modules=SUPPRESSED_MODULES, log_dir=\"./logs\"):\n    \"\"\"\n    Initializes the custom logger instance.\n\n    Parameters:\n    -----------\n    suppressed_modules : list, optional\n        A list of modules to suppress from rich traceback (default is SUPPRESSED_MODULES).\n    log_dir : str, optional\n        The directory where log files will be saved (default is \"./logs\").\n    \"\"\"\n\n    self._create_logs_dir(log_dir)\n\n    # This will install rich to traceback, which is quite handy\n    rich.traceback.install(\n        show_locals=False,\n        suppress=[__import__(name) for name in suppressed_modules],\n    )\n\n    config = {\n        \"handlers\": [\n            {\n                \"sink\": RichHandler(\n                    show_level=False,\n                    show_time=True,\n                    rich_tracebacks=True,\n                    markup=True,\n                    omit_repeated_times=False,\n                ),\n                # \"sink\": sys.stdout,\n                # This will force us to only use the rich handler on normal levels\n                \"filter\": lambda record: record[\"level\"].name == \"INFO\",\n                \"format\": \"{message}\",\n            },\n            # {\n            #     \"sink\": sys.stdout,\n            #     \"colorize\": True,\n            #     \"backtrace\": True,\n            #     \"diagnose\": True,\n            #     \"enqueue\": False,\n            #     \"format\": \"&lt;cyan&gt;\u276f {module}:{function} ({line})&lt;/cyan&gt; | &lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss.sss}&lt;/green&gt;\",\n            #     \"filter\": lambda record: record[\"level\"].name == \"INFO\",\n            # },\n            {\n                \"sink\": \"./logs/logs.log\",\n                \"level\": \"DEBUG\",\n                \"serialize\": True,\n                \"enqueue\": True,\n                \"colorize\": True,\n                \"format\": \"&lt;light-cyan&gt;\u276f {module}:{function} ({line})&lt;/light-cyan&gt; | &lt;light-black&gt;{time:YYYY-MM-DD at HH:mm:ss.sss}&lt;/light-black&gt;\\n{message}\",\n            },\n        ],\n    }\n\n    _logger.configure(**config)  # type: ignore\n    self.logger = _logger.patch(patching)\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/__init__/#tradingtoolbox.utils.Logger.error","title":"<code>error()</code>","text":"<p>Logs the most recent traceback error in a readable format, useful for. Uses the ERROR level</p> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>def error(self):\n    \"\"\"\n    Logs the most recent traceback error in a readable format, useful for. Uses the ERROR level\n    \"\"\"\n    console.print(Traceback())\n    recent_traceback = traceback.format_exc(limit=10)\n    self.logger.error(recent_traceback)\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/__init__/#tradingtoolbox.utils.Logger.print","title":"<code>print(obj)</code>","text":"<p>Logs an informational message, replacing the standard print function. Uses the INFO level</p> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>def print(self, obj):\n    \"\"\"\n    Logs an informational message, replacing the standard print function. Uses the INFO level\n    \"\"\"\n    self.logger.opt(depth=2).info(pretty_repr(obj))\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/__init__/#tradingtoolbox.utils.Logger.warning","title":"<code>warning(obj)</code>","text":"<p>Logs a warning message with the option to pretty-print an object. Uses the WARNING level</p> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>def warning(self, obj):\n    \"\"\"\n    Logs a warning message with the option to pretty-print an object. Uses the WARNING level\n    \"\"\"\n    self.logger.opt(depth=2).warning(pretty_repr(obj))\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/__init__/#tradingtoolbox.utils.print","title":"<code>print(*msg)</code>","text":"<p>Logs the provided object using an advanced logging mechanism.</p> <p>This method overrides the default <code>print</code> function to utilize a logger for output. It ensures that all output is captured through the logging system rather than standard output.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>Any</code> <p>The object to be logged. It can be of any type that the logger can handle, including strings, numbers, or custom objects.</p> <code>()</code> <p>Notes:</p> <ul> <li>This method provides more control and consistency by leveraging   the logging system, which is particularly useful in production   environments or when working with larger applications.</li> </ul> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>def print(*msg: Any) -&gt; None:\n    \"\"\"\n    Logs the provided object using an advanced logging mechanism.\n\n    This method overrides the default `print` function to utilize a\n    logger for output. It ensures that all output is captured\n    through the logging system rather than standard output.\n\n    Parameters:\n        msg: The object to be logged. It can be of any type that the\n            logger can handle, including strings, numbers, or custom objects.\n\n    **Notes**:\n\n    - This method provides more control and consistency by leveraging\n      the logging system, which is particularly useful in production\n      environments or when working with larger applications.\n    \"\"\"\n    logger.print(\" \".join(map(pretty_repr, msg)))\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/logger/","title":"Logger","text":"<p>General overview of how to use this</p>"},{"location":"reference/tradingtoolbox/utils/logger/#tradingtoolbox.utils.logger.Logger","title":"<code>Logger</code>","text":"<p>Custom Logger class utilizing Rich and Loguru for advanced logging.</p> <p>This class sets up a logging system that uses both the <code>Rich</code> library for enhanced output formatting in the console and <code>Loguru</code> for handling log files and more sophisticated logging features. The logger is configured to display colored and detailed logs in the terminal, while also saving structured logs to a file for debugging purposes.</p>"},{"location":"reference/tradingtoolbox/utils/logger/#tradingtoolbox.utils.logger.Logger--key-features","title":"Key Features:","text":"<ul> <li>Rich Tracebacks: Automatically installs Rich traceback for more readable   error messages in the console, highlighting key information such as line numbers   and functions.</li> <li>Log File Handling: Logs are saved in a specified directory with detailed   information in JSON-like format, serialized for easier parsing.</li> <li>Log Levels: Configured to handle different log levels, focusing on <code>INFO</code>   messages for the console and <code>DEBUG</code> level messages for log files.</li> </ul> <p>Usage Example <pre><code>from tradingtoolbox.utils import logger, Logger\n\n# Create a custom logger\ncustom_logger = Logger(supressed_modules=[\"talib\"], log_dir=\"./my_logs\")\n\ntry:\n    # Code that might fail\n    print(a)\nexcept Exception as e:\n    logger.error()\n\nlogger.warning(\"This is a warning message\")\nlogger.info({\"key\": \"value\"})\nlogger.print(\"This replaces the standard print\")\n</code></pre></p> <p>Notes:</p> <ul> <li>The logger's console output is colorized using <code>Rich</code>, and it includes rich tracebacks   for easier debugging.</li> <li>Log files are stored in the <code>log_dir</code> directory, defaulting to <code>./logs</code>.</li> </ul> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>class Logger:\n    \"\"\"\n    Custom Logger class utilizing Rich and Loguru for advanced logging.\n\n    This class sets up a logging system that uses both the `Rich` library\n    for enhanced output formatting in the console and `Loguru` for handling\n    log files and more sophisticated logging features. The logger is configured\n    to display colored and detailed logs in the terminal, while also saving\n    structured logs to a file for debugging purposes.\n\n    Key Features:\n    --------------\n    - **Rich Tracebacks**: Automatically installs Rich traceback for more readable\n      error messages in the console, highlighting key information such as line numbers\n      and functions.\n    - **Log File Handling**: Logs are saved in a specified directory with detailed\n      information in JSON-like format, serialized for easier parsing.\n    - **Log Levels**: Configured to handle different log levels, focusing on `INFO`\n      messages for the console and `DEBUG` level messages for log files.\n\n\n\n    **Usage Example**\n    ```python\n    from tradingtoolbox.utils import logger, Logger\n\n    # Create a custom logger\n    custom_logger = Logger(supressed_modules=[\"talib\"], log_dir=\"./my_logs\")\n\n    try:\n        # Code that might fail\n        print(a)\n    except Exception as e:\n        logger.error()\n\n    logger.warning(\"This is a warning message\")\n    logger.info({\"key\": \"value\"})\n    logger.print(\"This replaces the standard print\")\n    ```\n\n    **Notes:**\n\n    - The logger's console output is colorized using `Rich`, and it includes rich tracebacks\n      for easier debugging.\n    - Log files are stored in the `log_dir` directory, defaulting to `./logs`.\n    \"\"\"\n\n    def __init__(self, suppressed_modules=SUPPRESSED_MODULES, log_dir=\"./logs\"):\n        \"\"\"\n        Initializes the custom logger instance.\n\n        Parameters:\n        -----------\n        suppressed_modules : list, optional\n            A list of modules to suppress from rich traceback (default is SUPPRESSED_MODULES).\n        log_dir : str, optional\n            The directory where log files will be saved (default is \"./logs\").\n        \"\"\"\n\n        self._create_logs_dir(log_dir)\n\n        # This will install rich to traceback, which is quite handy\n        rich.traceback.install(\n            show_locals=False,\n            suppress=[__import__(name) for name in suppressed_modules],\n        )\n\n        config = {\n            \"handlers\": [\n                {\n                    \"sink\": RichHandler(\n                        show_level=False,\n                        show_time=True,\n                        rich_tracebacks=True,\n                        markup=True,\n                        omit_repeated_times=False,\n                    ),\n                    # \"sink\": sys.stdout,\n                    # This will force us to only use the rich handler on normal levels\n                    \"filter\": lambda record: record[\"level\"].name == \"INFO\",\n                    \"format\": \"{message}\",\n                },\n                # {\n                #     \"sink\": sys.stdout,\n                #     \"colorize\": True,\n                #     \"backtrace\": True,\n                #     \"diagnose\": True,\n                #     \"enqueue\": False,\n                #     \"format\": \"&lt;cyan&gt;\u276f {module}:{function} ({line})&lt;/cyan&gt; | &lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss.sss}&lt;/green&gt;\",\n                #     \"filter\": lambda record: record[\"level\"].name == \"INFO\",\n                # },\n                {\n                    \"sink\": \"./logs/logs.log\",\n                    \"level\": \"DEBUG\",\n                    \"serialize\": True,\n                    \"enqueue\": True,\n                    \"colorize\": True,\n                    \"format\": \"&lt;light-cyan&gt;\u276f {module}:{function} ({line})&lt;/light-cyan&gt; | &lt;light-black&gt;{time:YYYY-MM-DD at HH:mm:ss.sss}&lt;/light-black&gt;\\n{message}\",\n                },\n            ],\n        }\n\n        _logger.configure(**config)  # type: ignore\n        self.logger = _logger.patch(patching)\n\n    def _create_logs_dir(self, directory=\"./logs\"):\n        os.makedirs(directory, exist_ok=True)\n\n    def error(self):\n        \"\"\"\n        Logs the most recent traceback error in a readable format, useful for. Uses the ERROR level\n        \"\"\"\n        console.print(Traceback())\n        recent_traceback = traceback.format_exc(limit=10)\n        self.logger.error(recent_traceback)\n\n    def warning(self, obj):\n        \"\"\"\n        Logs a warning message with the option to pretty-print an object. Uses the WARNING level\n        \"\"\"\n        self.logger.opt(depth=2).warning(pretty_repr(obj))\n\n    def print(self, obj):\n        \"\"\"\n        Logs an informational message, replacing the standard print function. Uses the INFO level\n        \"\"\"\n        self.logger.opt(depth=2).info(pretty_repr(obj))\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/logger/#tradingtoolbox.utils.logger.Logger.__init__","title":"<code>__init__(suppressed_modules=SUPPRESSED_MODULES, log_dir='./logs')</code>","text":"<p>Initializes the custom logger instance.</p>"},{"location":"reference/tradingtoolbox/utils/logger/#tradingtoolbox.utils.logger.Logger.__init__--parameters","title":"Parameters:","text":"<p>suppressed_modules : list, optional     A list of modules to suppress from rich traceback (default is SUPPRESSED_MODULES). log_dir : str, optional     The directory where log files will be saved (default is \"./logs\").</p> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>def __init__(self, suppressed_modules=SUPPRESSED_MODULES, log_dir=\"./logs\"):\n    \"\"\"\n    Initializes the custom logger instance.\n\n    Parameters:\n    -----------\n    suppressed_modules : list, optional\n        A list of modules to suppress from rich traceback (default is SUPPRESSED_MODULES).\n    log_dir : str, optional\n        The directory where log files will be saved (default is \"./logs\").\n    \"\"\"\n\n    self._create_logs_dir(log_dir)\n\n    # This will install rich to traceback, which is quite handy\n    rich.traceback.install(\n        show_locals=False,\n        suppress=[__import__(name) for name in suppressed_modules],\n    )\n\n    config = {\n        \"handlers\": [\n            {\n                \"sink\": RichHandler(\n                    show_level=False,\n                    show_time=True,\n                    rich_tracebacks=True,\n                    markup=True,\n                    omit_repeated_times=False,\n                ),\n                # \"sink\": sys.stdout,\n                # This will force us to only use the rich handler on normal levels\n                \"filter\": lambda record: record[\"level\"].name == \"INFO\",\n                \"format\": \"{message}\",\n            },\n            # {\n            #     \"sink\": sys.stdout,\n            #     \"colorize\": True,\n            #     \"backtrace\": True,\n            #     \"diagnose\": True,\n            #     \"enqueue\": False,\n            #     \"format\": \"&lt;cyan&gt;\u276f {module}:{function} ({line})&lt;/cyan&gt; | &lt;green&gt;{time:YYYY-MM-DD at HH:mm:ss.sss}&lt;/green&gt;\",\n            #     \"filter\": lambda record: record[\"level\"].name == \"INFO\",\n            # },\n            {\n                \"sink\": \"./logs/logs.log\",\n                \"level\": \"DEBUG\",\n                \"serialize\": True,\n                \"enqueue\": True,\n                \"colorize\": True,\n                \"format\": \"&lt;light-cyan&gt;\u276f {module}:{function} ({line})&lt;/light-cyan&gt; | &lt;light-black&gt;{time:YYYY-MM-DD at HH:mm:ss.sss}&lt;/light-black&gt;\\n{message}\",\n            },\n        ],\n    }\n\n    _logger.configure(**config)  # type: ignore\n    self.logger = _logger.patch(patching)\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/logger/#tradingtoolbox.utils.logger.Logger.error","title":"<code>error()</code>","text":"<p>Logs the most recent traceback error in a readable format, useful for. Uses the ERROR level</p> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>def error(self):\n    \"\"\"\n    Logs the most recent traceback error in a readable format, useful for. Uses the ERROR level\n    \"\"\"\n    console.print(Traceback())\n    recent_traceback = traceback.format_exc(limit=10)\n    self.logger.error(recent_traceback)\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/logger/#tradingtoolbox.utils.logger.Logger.print","title":"<code>print(obj)</code>","text":"<p>Logs an informational message, replacing the standard print function. Uses the INFO level</p> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>def print(self, obj):\n    \"\"\"\n    Logs an informational message, replacing the standard print function. Uses the INFO level\n    \"\"\"\n    self.logger.opt(depth=2).info(pretty_repr(obj))\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/logger/#tradingtoolbox.utils.logger.Logger.warning","title":"<code>warning(obj)</code>","text":"<p>Logs a warning message with the option to pretty-print an object. Uses the WARNING level</p> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>def warning(self, obj):\n    \"\"\"\n    Logs a warning message with the option to pretty-print an object. Uses the WARNING level\n    \"\"\"\n    self.logger.opt(depth=2).warning(pretty_repr(obj))\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/logger/#tradingtoolbox.utils.logger.print","title":"<code>print(*msg)</code>","text":"<p>Logs the provided object using an advanced logging mechanism.</p> <p>This method overrides the default <code>print</code> function to utilize a logger for output. It ensures that all output is captured through the logging system rather than standard output.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>Any</code> <p>The object to be logged. It can be of any type that the logger can handle, including strings, numbers, or custom objects.</p> <code>()</code> <p>Notes:</p> <ul> <li>This method provides more control and consistency by leveraging   the logging system, which is particularly useful in production   environments or when working with larger applications.</li> </ul> Source code in <code>src/tradingtoolbox/utils/logger.py</code> <pre><code>def print(*msg: Any) -&gt; None:\n    \"\"\"\n    Logs the provided object using an advanced logging mechanism.\n\n    This method overrides the default `print` function to utilize a\n    logger for output. It ensures that all output is captured\n    through the logging system rather than standard output.\n\n    Parameters:\n        msg: The object to be logged. It can be of any type that the\n            logger can handle, including strings, numbers, or custom objects.\n\n    **Notes**:\n\n    - This method provides more control and consistency by leveraging\n      the logging system, which is particularly useful in production\n      environments or when working with larger applications.\n    \"\"\"\n    logger.print(\" \".join(map(pretty_repr, msg)))\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/resample/","title":"Resample","text":""},{"location":"reference/tradingtoolbox/utils/resample/#tradingtoolbox.utils.resample.resample","title":"<code>resample(df, tf='1H', agg=agg, on='date')</code>","text":"<p>Create the docs for this</p> Source code in <code>src/tradingtoolbox/utils/resample.py</code> <pre><code>def resample(df, tf=\"1H\", agg=agg, on=\"date\"):\n    \"\"\"\n    Create the docs for this\n    \"\"\"\n    return df.resample(tf, on=on).agg(agg).dropna(how=\"all\").fillna(method=\"ffill\")\n</code></pre>"},{"location":"reference/tradingtoolbox/utils/time_manip/","title":"Time manip","text":""}]}